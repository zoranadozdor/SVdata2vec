import torch
import torch.nn as nn
import torch.nn.functional as F
import math
import warnings
from .drop import DropPath

from .ema_module import EMAModule,EMAModuleConfig
from .resnet import ResEncoder


def _no_grad_trunc_normal_(tensor, mean, std, a, b):
    # Cut & paste from PyTorch official master until it's in a few official releases - RW
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1. + math.erf(x / math.sqrt(2.))) / 2.

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        warnings.warn("mean is more than 2 std from [a, b] in nn.init.trunc_normal_. "
                      "The distribution of values may be incorrect.",
                      stacklevel=2)

    with torch.no_grad():
        # Values are generated by using a truncated uniform distribution and
        # then using the inverse CDF for the normal distribution.
        # Get upper and lower cdf values
        l = norm_cdf((a - mean) / std)
        u = norm_cdf((b - mean) / std)

        # Uniformly fill tensor with values from [l, u], then translate to
        # [2l-1, 2u-1].
        tensor.uniform_(2 * l - 1, 2 * u - 1)

        # Use inverse cdf transform for normal distribution to get truncated
        # standard normal
        tensor.erfinv_()

        # Transform to proper mean, std
        tensor.mul_(std * math.sqrt(2.))
        tensor.add_(mean)

        # Clamp to ensure it's in the proper range
        tensor.clamp_(min=a, max=b)
        return tensor


def trunc_normal_(tensor, mean=0., std=1., a=-2., b=2.):
    # type: (Tensor, float, float, float, float) -> Tensor
    r"""Fills the input Tensor with values drawn from a truncated
    normal distribution. The values are effectively drawn from the
    normal distribution :math:`\mathcal{N}(\text{mean}, \text{std}^2)`
    with values outside :math:`[a, b]` redrawn until they are within
    the bounds. The method used for generating the random values works
    best when :math:`a \leq \text{mean} \leq b`.
    Args:
        tensor: an n-dimensional `torch.Tensor`
        mean: the mean of the normal distribution
        std: the standard deviation of the normal distribution
        a: the minimum cutoff value
        b: the maximum cutoff value
    Examples:
        >>> w = torch.empty(3, 5)
        >>> nn.init.trunc_normal_(w)
    """
    return _no_grad_trunc_normal_(tensor, mean, std, a, b)

class SkeleEmbed(nn.Module):
    """Image to Patch Embedding"""

    def __init__(
        self,
        dim_in=3,
        dim_feat=256,
        num_frames=120,
        num_joints=25,
        patch_size=1,
        t_patch_size=4,
    ):
        super().__init__()
        assert num_frames % t_patch_size == 0
        num_patches = (
            (num_joints // patch_size) * (num_frames // t_patch_size)
        )
        self.input_size = (
            num_frames // t_patch_size,
            num_joints // patch_size
        )
        print(
            f"num_joints {num_joints} patch_size {patch_size} num_frames {num_frames} t_patch_size {t_patch_size}"
        )

        self.num_joints = num_joints
        self.patch_size = patch_size

        self.num_frames = num_frames
        self.t_patch_size = t_patch_size

        self.num_patches = num_patches

        self.grid_size = num_joints // patch_size
        self.t_grid_size = num_frames // t_patch_size

        kernel_size = [t_patch_size, patch_size]
        self.proj = nn.Conv2d(dim_in*2, dim_feat, kernel_size=kernel_size, stride=kernel_size)

    def forward(self, x):
        _, T, V, _ = x.shape
        x = torch.einsum("ntsc->ncts", x)  # [N, C, T, V]
        
        assert (
            V == self.num_joints
        ), f"Input skeleton size ({V}) doesn't match model ({self.num_joints})."
        assert (
            T == self.num_frames
        ), f"Input skeleton length ({T}) doesn't match model ({self.num_frames})."
        
        x = self.proj(x)
        x = torch.einsum("ncts->ntsc", x)  # [N, T, V, C]
        return x

class MLP(nn.Module):
    def __init__(self, in_features, hidden_features=None, out_features=None, act_layer=nn.GELU, drop=0.):
        super().__init__()
        out_features = out_features or in_features
        hidden_features = hidden_features or in_features
        self.fc1 = nn.Linear(in_features, hidden_features)
        self.act = act_layer()
        self.fc2 = nn.Linear(hidden_features, out_features)
        self.drop = nn.Dropout(drop)

    def forward(self, x):
        x = self.fc1(x)
        x = self.act(x)
        x = self.drop(x)
        x = self.fc2(x)
        x = self.drop(x)
        return x

class Attention(nn.Module):
    def __init__(self, dim, num_heads=8, qkv_bias=False, qk_scale=None, attn_drop=0., proj_drop=0.):
        super().__init__()
        self.num_heads = num_heads
        head_dim = dim // num_heads
        # NOTE scale factor was wrong in my original version, can set manually to be compat with prev weights
        self.scale = head_dim ** -0.5

        self.attn_drop = nn.Dropout(attn_drop)
        self.proj = nn.Linear(dim, dim)

        self.qkv = nn.Linear(dim, dim * 3, bias=qkv_bias)
        self.proj_drop = nn.Dropout(proj_drop)

    def forward(self, x, seqlen=1):
        B, N, C = x.shape
        
        qkv = self.qkv(x).reshape(B, N, 3, self.num_heads, C // self.num_heads).permute(2, 0, 3, 1, 4)
        q, k, v = qkv[0], qkv[1], qkv[2]   # make torchscript happy (cannot use tensor as tuple)
        x = self.forward_attention(q, k, v)

        x = self.proj(x)
        x = self.proj_drop(x)
        return x

    def forward_attention(self, q, k, v):
        B, _, N, C = q.shape
        attn = (q @ k.transpose(-2, -1)) * self.scale
        attn = attn.softmax(dim=-1)
        attn = self.attn_drop(attn)

        x = attn @ v
        x = x.transpose(1,2).reshape(B, N, C*self.num_heads)
        return x

class Block(nn.Module):

    def __init__(self, dim, num_heads, mlp_ratio=4., mlp_out_ratio=1.,
                 qkv_bias=True, qk_scale=None, drop=0., attn_drop=0.,
                 drop_path=0., act_layer=nn.GELU, norm_layer=nn.LayerNorm, block_norm_first=True, target_ffn=False):
        super().__init__()
        # assert 'stage' in st_mode
        self.block_norm_first=block_norm_first
        self.norm1 = norm_layer(dim)
        self.attn = Attention(dim, num_heads=num_heads,
                              qkv_bias=qkv_bias, qk_scale=qk_scale,
                              attn_drop=attn_drop, proj_drop=drop)
        
        # NOTE: drop path for stochastic depth, we shall see if this is better than dropout here
        self.drop_path = DropPath(drop_path) if drop_path > 0. else nn.Identity()
        
        self.norm2 = norm_layer(dim)
        mlp_hidden_dim = int(dim * mlp_ratio)
        mlp_out_dim = int(dim * mlp_out_ratio)

        self.mlp = MLP(in_features=dim, hidden_features=mlp_hidden_dim,
                       out_features=mlp_out_dim, act_layer=act_layer, drop=drop)
        
        #forward hook for output of ffn 
        if target_ffn:
            self.ffn_out = None
            self.mlp.fc2.register_forward_hook(self.forward_hook())
    
    def forward_hook(self):
        def hook(module, input, output):
            self.ffn_out = output
        return hook

    def forward(self, x, seqlen=1):
        if self.block_norm_first:
            x = x + self.drop_path(self.attn(self.norm1(x), seqlen))
            x = x + self.drop_path(self.mlp(self.norm2(x)))
        else:
            #norma after 
            x = x + self.drop_path(self.attn(x, seqlen))
            x = self.norm1(x)
            x = x + self.drop_path(self.mlp(x))
            x = self.norm2(x)

        return x 


class SubModel(nn.Module):
    def __init__(self, resnet=None, input_dim=None, encoder_input_dim=None):
        super().__init__()
        self.resnet = resnet
        self.proj = nn.Linear(input_dim, encoder_input_dim)

    def forward(self, x):
        if self.resnet is not None:
            x = self.resnet(x)
        x = self.proj(x.transpose(1, 2))
        #x = x.transpose(1, 2)
        return x



class Transformer(nn.Module):
    def __init__(self, dim_in=3, dim_feat=256, decoder_dim_feat=256,
                 depth=5, decoder_depth=5, num_heads=8, mlp_ratio=4,
                 num_frames=120, num_joints=25, patch_size=1, t_patch_size=4,
                 qkv_bias=True, qk_scale=None, drop_rate=0., attn_drop_rate=0.,
                 drop_path_rate=0., norm_layer=nn.LayerNorm,
                 num_layers_for_target=8, ema_decay=0.9999, ema_end_decay=1, ema_anneal_end_step=100000, 
                 instance_norm_target_layer=False, batch_norm_target_layer=False,
                 layer_norm_target_layer=False, layer_norm_targets=False, 
                 instance_norm_targets=False, skip_ema=False, block_norm_first=True, target_ffn=False, target_both=False):

        super().__init__()
        
        self.dim_feat = dim_feat
        self.depth=depth
        self.num_heads=num_heads
        self.mlp_ratio=mlp_ratio
        self.qkv_bias=qkv_bias
        self.qk_scale=qk_scale
        self.drop_rate=drop_rate
        self.attn_drop_rate=attn_drop_rate
        self.drop_path_rate=drop_path_rate
        self.norm_layer=norm_layer

        self.num_frames = num_frames
        self.num_joints = num_joints
        self.patch_size = patch_size
        self.t_patch_size = t_patch_size
        self.target_both = target_both
        self.target_ffn = target_ffn

        self.ema=None

        self.num_layers_for_target=num_layers_for_target
        self.instance_norm_target_layer=instance_norm_target_layer
        self.batch_norm_target_layer=batch_norm_target_layer
        self.layer_norm_target_layer=layer_norm_target_layer
        self.layer_norm_targets=layer_norm_targets
        self.instance_norm_targets=instance_norm_targets

        # --------------------------------------------------------------------------
        # MAE encoder specifics
        if not skip_ema:
            self.joints_embed = SkeleEmbed(dim_in, dim_feat, num_frames, num_joints, patch_size, t_patch_size)
            resnet = ResEncoder(relu_type="prelu", weights=None)
            self.feature_extractor_video = SubModel(resnet=resnet, input_dim=resnet.backend_out, encoder_input_dim= dim_feat)

            self.pos_drop = nn.Dropout(p=drop_rate)
        
        #keep this for the ema teacher
        dpr = [x.item() for x in torch.linspace(0, drop_path_rate, depth)]  # stochastic depth decay rule
        self.blocks = nn.ModuleList([
            Block(
                dim=dim_feat, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale,
                drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[i], norm_layer=norm_layer, block_norm_first=block_norm_first, target_ffn=target_ffn)
            for i in range(depth)])
        self.norm = norm_layer(dim_feat)

        if not skip_ema:
            self.temp_embed = nn.Parameter(torch.zeros(1, num_frames, dim_feat))
            trunc_normal_(self.temp_embed, std=.02)

        # --------------------------------------------------------------------------

        # --------------------------------------------------------------------------

        if not skip_ema:
            # MAE decoder specifics
            self.decoder_embed = nn.Linear(dim_feat, decoder_dim_feat, bias=True)

            self.mask_token = nn.Parameter(torch.zeros(1, 1, decoder_dim_feat))
            trunc_normal_(self.mask_token, std=.02)

            self.decoder_blocks = nn.ModuleList([
                Block(
                    dim=decoder_dim_feat, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale,
                    drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[i], norm_layer=norm_layer, block_norm_first=block_norm_first, target_ffn=False)
                for i in range(decoder_depth)])
            self.decoder_norm = norm_layer(decoder_dim_feat)

            self.decoder_temp_embed = nn.Parameter(torch.zeros(1, num_frames, decoder_dim_feat))
            trunc_normal_(self.decoder_temp_embed, std=.02)

            self.decoder_pred = nn.Linear(
                decoder_dim_feat,
                decoder_dim_feat,
                bias=True
            ) # decoder to patch
            # --------------------------------------------------------------------------

        if not skip_ema:
            self.ema_decay=ema_decay
            self.ema_end_decay=ema_end_decay
            self.ema_anneal_end_step=ema_anneal_end_step
            self.num_updates=0
            self.ema=self.make_ema_teacher(self.ema_decay)

        # --------------------------------------------------------------------------
        # Initialize weights
        # should the init be same for student and teacher model?
        if not skip_ema:
            self.apply(self._init_weights)
        # --------------------------------------------------------------------------
        

    @torch.no_grad()
    def make_ema_teacher(self, ema_decay):
        ema_config = EMAModuleConfig(
            ema_decay=ema_decay,
            ema_fp32=True,
            log_norms=False, 
            add_missing_params=False,
        )

        model_copy = self.make_target_model()

        return EMAModule(
            model_copy,
            ema_config,
            copy_model=False,
        )

    def make_target_model(self):
        """
        make teacher model by copying student model without ema and decoder
        """

        model_copy=Transformer(dim_feat=self.dim_feat, depth=self.depth, num_heads=self.num_heads, 
                               mlp_ratio=self.mlp_ratio,qkv_bias=self.qkv_bias, qk_scale=self.qk_scale, 
                               drop_rate=self.drop_rate, attn_drop_rate=self.attn_drop_rate,
                               drop_path_rate=self.drop_path_rate, norm_layer=self.norm_layer,skip_ema=True, target_both=self.target_both) 
        
        model_copy = model_copy.blocks
        for p_s, p_t in zip(self.blocks.parameters(), model_copy.parameters()):
                p_t.data.copy_(p_s.data)

        model_copy.requires_grad_(False)

        return model_copy

    def _init_weights(self, m):
        if isinstance(m, nn.Linear):
            # we use xavier_uniform following official JAX ViT:
            torch.nn.init.xavier_uniform_(m.weight)
            if isinstance(m, nn.Linear) and m.bias is not None:
                nn.init.constant_(m.bias, 0)
        elif isinstance(m, nn.LayerNorm):
            nn.init.constant_(m.bias, 0)
            nn.init.constant_(m.weight, 1.0)


    def random_masking(self, x, mask_ratio):
        """
        Perform per-sample random masking by per-sample shuffling.
        Per-sample shuffling is done by argsort random noise.
        x: [N, L, D], sequence
        """
        N, L, D = x.shape  # batch, length, dim
        len_keep = int(L * (1 - mask_ratio))

        noise = torch.rand(N, L, device=x.device)  # noise in [0, 1]

        # sort noise for each sample
        ids_shuffle = torch.argsort(
            noise, dim=1
        )  # ascend: small is keep, large is remove
        ids_restore = torch.argsort(ids_shuffle, dim=1)

        # keep the first subset
        ids_keep = ids_shuffle[:, :len_keep]
        x_masked = torch.gather(x, dim=1, index=ids_keep.unsqueeze(-1).repeat(1, 1, D))

        # generate the binary mask: 0 is keep, 1 is remove
        mask = torch.ones([N, L], device=x.device)
        mask[:, :len_keep] = 0
        # unshuffle to get the binary mask
        mask = torch.gather(mask, dim=1, index=ids_restore)

        return x_masked, mask, ids_restore, ids_keep
    
    def random_masking_video(self, x, mask_ratio):
        """
        Perform per-sample random masking by per-sample shuffling.
        Per-sample shuffling is done by argsort random noise.
        x: [N, L, D], sequence
        """
        N, C, L, H, W = x.shape
        #N, L, D = x.shape  # batch, length, dim
        len_keep = int(L * (1 - mask_ratio))

        noise = torch.rand(N, L, device=x.device)  # noise in [0, 1]

        # sort noise for each sample
        ids_shuffle = torch.argsort(
            noise, dim=1
        )  # ascend: small is keep, large is remove
        ids_restore = torch.argsort(ids_shuffle, dim=1)

        # keep the first subset
        ids_keep = ids_shuffle[:, :len_keep]
        x_masked = torch.gather(x, dim=2, index=ids_keep.unsqueeze(1).unsqueeze(-1).unsqueeze(-1).repeat(1,C, 1, H,W))

        # generate the binary mask: 0 is keep, 1 is remove
        mask = torch.ones([N, L], device=x.device)
        mask[:, :len_keep] = 0
        # unshuffle to get the binary mask
        mask = torch.gather(mask, dim=1, index=ids_restore)

        return x_masked, mask, ids_restore, ids_keep

    def forward_encoder(self, x, x_skele, mask_ratio):

        x_vid=self.feature_extractor_video(x)
        NM, TP, _ = x_vid.shape
        x_vid = x_vid +  self.temp_embed[:, :TP,  :]

        #do the same for skeleton
        x_skele=self.joints_embed(x_skele)
        NM, TP, VP, _ = x_skele.shape
        x_skele = x_skele.reshape(NM, TP * VP, -1)
        x_skele = x_skele + self.temp_embed[:, :TP, :]
        
        #random mask 70% of video
        x_vid, mask_vid, ids_restore_vid, ids_keep_video =self.random_masking(x_vid, 0.66)

        #mask the same 70% tokens in skeleton
        N, L, D = x_skele.shape  # batch, length, dim
        x_skele = torch.gather(x_skele, dim=1, index=ids_keep_video.unsqueeze(-1).repeat(1, 1, D))

        #mask additional 60% of visible skeleton tokens
        _, mask_skele, _, _ =self.random_masking(x_skele, 0.75)

        ids_restore_skele=ids_keep_video[mask_skele.bool()]
        ids_restore_skele=ids_restore_skele.view(N,-1)

        x=(x_vid+x_skele)/2.

        x[mask_skele.bool()]=x_vid[mask_skele.bool()]

        #create mask as masked video tokens+masked skeleton tokens
        mask=mask_vid
        mask.scatter_(index=ids_restore_skele, dim=1, value=1)

        #ids restore are only video, as for those we dont have tokens
        ids_restore=ids_restore_vid


        # apply Transformer blocks
        for idx, blk in enumerate(self.blocks):
            x = blk(x)

        x = self.norm(x)

        return x, mask, ids_restore

    def forward_decoder(self, x, ids_restore):
        NM = x.shape[0]

        # embed tokens
        x = self.decoder_embed(x)
        C = x.shape[-1]

        # append intra mask tokens to sequence
        mask_tokens = self.mask_token.repeat(NM, self.num_frames - x.shape[1], 1)
        x_ = torch.cat([x[:, :, :], mask_tokens], dim=1)  # no cls token
        x_ = torch.gather(
            x_, dim=1, index=ids_restore.unsqueeze(-1).repeat(1, 1, x_.shape[2])
        )  # unshuffle
        
        x=x_
        TP = x.shape[1]

        # add pos & temp embed
        x = x + self.decoder_temp_embed[:, :TP,  :]  # NM, TP, VP, C
        
        # apply Transformer blocks
        for idx, blk in enumerate(self.decoder_blocks):
            x = blk(x)
        
        x = self.decoder_norm(x)
        
        # predictor projection
        x = self.decoder_pred(x)

        return x
        

    def forward_loss(self, target, pred, mask):

        loss = (pred - target) ** 2
        loss = loss.mean(dim=(-1))  # [NM, TP * VP], mean loss per patch
        loss = (loss * mask).sum() / mask.sum()  # mean loss on removed joints

        return loss

    def get_latent_from_ema(self,x, video):

        tm = self.ema.model
        p = next(self.ema.model.parameters())
        device = x.device
        dtype = x.dtype
        ema_device = p.device
        ema_dtype = p.dtype


        if ema_device != device or ema_dtype != dtype:
            self.ema.model = self.ema.model.to(dtype=dtype, device=device)
            ema_dtype = dtype

            def to_device(d):
                for k, p in d.items():
                    if isinstance(d[k], dict):
                        to_device(d[k])
                    else:
                        d[k] = p.to(device=device)

            to_device(self.ema.fp32_params)


        with torch.no_grad():
            tm.eval()

            x=self.joints_embed(x)
            
            NM, TP, VP, _ = x.shape

            x = x.reshape(NM, TP * VP, -1)
            x_skele = x + self.temp_embed[:, :TP, :]

            if(self.target_both):
                x_vid=self.feature_extractor_video(video)
                x_vid = x_vid +  self.temp_embed[:, :TP,  :]
                x=(x_vid+x_skele)/2.
            else:
                x=x_skele

            ema_blocks = tm

            y=[]
            y_vid=[]
            for idx, blk in enumerate(ema_blocks):
                x = blk(x)
                if self.target_ffn:
                    y.append(blk.ffn_out)
                else:
                    y.append(x)

            return self.make_targets(y, self.num_layers_for_target)#,self.make_targets(y_vid, self.num_layers_for_target)  
    
    def make_targets(self, y, num_layers):

        with torch.no_grad():
            target_layer_results = y[-num_layers:]

            permuted = False
            if self.instance_norm_target_layer or self.batch_norm_target_layer:
                target_layer_results = [
                    tl.transpose(1, 2) for tl in target_layer_results  # BTC -> BCT
                ]
                permuted = True
            if self.batch_norm_target_layer:
                target_layer_results = [
                    F.batch_norm(
                        tl.float(), running_mean=None, running_var=None, training=True
                    )
                    for tl in target_layer_results
                ]
            if self.instance_norm_target_layer:
                target_layer_results = [
                    F.instance_norm(tl.float()) for tl in target_layer_results
                ]
            if permuted:
                target_layer_results = [
                    tl.transpose(1, 2) for tl in target_layer_results  # BCT -> BTC
                ]
            if self.layer_norm_target_layer:
                target_layer_results = [
                    F.layer_norm(tl.float(), tl.shape[-1:])
                    for tl in target_layer_results
                ]

        y = target_layer_results[0].float()
        for tl in target_layer_results[1:]:
            y.add_(tl.float())
        y = y.div_(len(target_layer_results))

        if self.layer_norm_targets:
            y = F.layer_norm(y, y.shape[-1:])

        if self.instance_norm_targets:
            y = F.instance_norm(y.transpose(1, 2)).transpose(1, 2)

        return y
    
    @staticmethod
    def compute_var(y):
        y = y.view(-1, y.size(-1))
        if dist.is_initialized():
            zc = torch.tensor(y.size(0)).cuda()
            zs = y.sum(dim=0)
            zss = (y**2).sum(dim=0)

            dist.all_reduce(zc)
            dist.all_reduce(zs)
            dist.all_reduce(zss)

            var = zss / (zc - 1) - (zs**2) / (zc * (zc - 1))
            return torch.sqrt(var + 1e-6).mean()
        else:
            return torch.sqrt(y.var(dim=0) + 1e-6).mean()


    def get_annealed_rate(self,start, end, curr_step, total_steps):
        if curr_step >= total_steps:
            return end
        r = end - start
        pct_remaining = 1 - curr_step / total_steps
        return end - r * pct_remaining

    def update_ema(self,num_updates):

        if self.ema is not None and (
            (self.num_updates == 0 and num_updates > 1)
            or self.num_updates >= num_updates
        ):
            pass
        elif self.training and self.ema is not None:
            ema_weight_decay = None
            if self.ema_decay != self.ema_end_decay:
                if num_updates >= self.ema_anneal_end_step:
                    decay = self.ema_end_decay
                else:
                    decay = self.get_annealed_rate(
                        self.ema_decay,
                        self.ema_end_decay,
                        num_updates,
                        self.ema_anneal_end_step,
                    )
                self.ema.set_decay(decay, weight_decay=ema_weight_decay)
            if self.ema.get_decay() < 1:
                self.ema.step(self.blocks)
            
        self.num_updates = num_updates
    

    def forward(self, x, x_skele, mask_ratio=0.80, motion_stride=1, motion_aware_tau=0.75, **kwargs):
        N, I, C, T, H, W = x.shape

        NJ, IJ, TJ, VJ, CJ =x_skele.shape
        x = x.view(N, C, T, H, W)
        x_skele=x_skele.permute((0,2,3,1,4)).contiguous().view(NJ,TJ,VJ,IJ*CJ)
        latent_representations = self.get_latent_from_ema(x_skele,x)

        latent, mask, ids_restore = self.forward_encoder(x,x_skele, mask_ratio)
        pred = self.forward_decoder(latent, ids_restore)  # [NM, TP * VP, C]

        loss = self.forward_loss(latent_representations, pred, mask)
        
        return loss, pred, mask
